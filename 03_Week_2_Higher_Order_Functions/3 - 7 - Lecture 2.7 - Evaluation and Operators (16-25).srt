1
00:00:00,475 --> 00:00:06,261
Over the first two weeks we have introduced a model of evaluation of programs

2
00:00:06,261 --> 00:00:10,322
based on term rewriting. That was the so-called substitution model.

3
00:00:10,322 --> 00:00:14,796
It's a fair question to ask whether when we have now these new concepts,

4
00:00:14,796 --> 00:00:21,762
classes and methods and self-references, whether these concepts can be ported to our

5
00:00:21,762 --> 00:00:25,990
evaluation model. Whether they can be extended to cover these as well.

6
00:00:25,990 --> 00:00:29,325
In this session you're going to find out how this is done.

7
00:00:29,325 --> 00:00:34,194
So far we've only developed this model for pure functions.

8
00:00:34,198 --> 00:00:41,396
We have defined the meaning of a function application using a model based on substitutions.

9
00:00:41,396 --> 00:00:44,626
And now we extend this model to classes and objects.

10
00:00:44,626 --> 00:00:48,978
The first question we need to ask is how is an instantiation of a class

11
00:00:48,978 --> 00:00:53,964
like new C with some argument expression evaluated.

12
00:00:53,964 --> 00:00:59,257
The answer is surprisingly simple.
We will evaluate the expression arguments,

13
00:00:59,257 --> 00:01:02,077
e 1 to e m.
Just like the arguments of a normal

14
00:01:02,077 --> 00:01:05,844
function.
And that's it.

15
00:01:05,844 --> 00:01:11,575
In fact the resulting expression new c of
some values, v one to v m is already a

16
00:01:11,575 --> 00:01:16,361
value.
So we just take these new instance

17
00:01:16,361 --> 00:01:19,392
creation expressions as values.
Next question.

18
00:01:19,392 --> 00:01:23,463
Let's suppose we have a class definition,
like the one you see here.

19
00:01:23,463 --> 00:01:29,257
Where we have a class C with a method F.
And the formal parameters of the class are

20
00:01:29,257 --> 00:01:35,242
named X1 to XM.
And the method F has parameters Y1 to YM.

21
00:01:35,242 --> 00:01:40,264
The function parameters or the class
parameters can both be empty.

22
00:01:40,264 --> 00:01:45,233
And for simplicity we have omitted any
parameter types.

23
00:01:45,233 --> 00:01:50,953
Now the central question is if we have an
expression like that.

24
00:01:50,953 --> 00:01:57,507
We have a class instance new C of V1 to
VM, and we call them F at F, and pass it

25
00:01:57,507 --> 00:02:05,441
further arguments values, W1 to WN.
How is that evaluated?

26
00:02:05,441 --> 00:02:08,424
Let's see how we would answer these
questions.

27
00:02:08,424 --> 00:02:16,581
So as a reminder we would have the class,
C, and that has the X parameters.

28
00:02:16,581 --> 00:02:24,883
And then it has a function f.
And that would have the y parameters.

29
00:02:24,883 --> 00:02:30,300
And a body B.
If you have an expression like this one

30
00:02:30,300 --> 00:02:35,633
here, then it is re-written not using one
substitution as for plain functions, but

31
00:02:35,633 --> 00:02:40,098
three substitutions.
The first substitution is the one you have

32
00:02:40,098 --> 00:02:43,999
seen before.
We would have to replace the actual, the

33
00:02:43,999 --> 00:02:51,766
formal parameters of the function f with
the actual argument values w1 to wn, so

34
00:02:51,766 --> 00:02:54,648
that's that substitution that you see
here.

35
00:02:54,648 --> 00:02:59,802
The next substitution affects the class.
So we have former parameters of the class,

36
00:02:59,802 --> 00:03:05,334
this also have to be replaced by the
actual argument values that we have here

37
00:03:05,334 --> 00:03:07,934
when we create the class.
So that it gives us the second

38
00:03:07,934 --> 00:03:12,071
substitution.
The third substitution is important,

39
00:03:12,071 --> 00:03:17,148
because the body of the function F here
could contain

40
00:03:17,148 --> 00:03:22,496
reference to this, the current class
itself and of course that reference to

41
00:03:22,496 --> 00:03:25,863
this outside of the class wouldn't have
any meaning.

42
00:03:25,863 --> 00:03:28,140
So we have to replace it with something
else.

43
00:03:28,140 --> 00:03:33,190
What do we replace it with?
Well, the idea is simply the receiver of

44
00:03:33,190 --> 00:03:37,531
this call.
So the value new C v1 to vm

45
00:03:37,531 --> 00:03:43,887
itself, so that's the object that
takes the method call and so that's the

46
00:03:43,887 --> 00:03:49,165
object that replaces "this".
So you see, there's three substitutions at

47
00:03:49,165 --> 00:03:51,961
play.
It's quite a bit more complicated than in

48
00:03:51,961 --> 00:03:57,058
the purely functional model, but it's
still the same model so we can model

49
00:03:57,058 --> 00:04:00,573
evaluation with exactly the same
mechanisms as before.

50
00:04:00,573 --> 00:04:05,310
So let's demonstrate that with an example.
We're looking at the method called new

51
00:04:05,310 --> 00:04:11,224
Rational 1, 2 dot numer.
As a reminder, I've put up the essential

52
00:04:11,224 --> 00:04:16,356
parts of class rational here.
So let's see what happens for this method

53
00:04:16,356 --> 00:04:19,605
call here.
I put up the formal definition.

54
00:04:19,605 --> 00:04:23,783
We have three substitutions at play.
There's a substitution for the class

55
00:04:23,783 --> 00:04:28,436
parameters where the actual values one,
two replace the x and the y.

56
00:04:28,436 --> 00:04:32,205
For the method in this case, there's
nothing to replace because numer doesn't

57
00:04:32,205 --> 00:04:36,454
have any parameters.
And finally, any occurrence of this would

58
00:04:36,454 --> 00:04:41,766
have to be replaced by the object itself
so that we would be new Rational(1, 2).

59
00:04:41,766 --> 00:04:44,752
In this case, it turns out that the right
hand side of numer is very simple, it's

60
00:04:44,752 --> 00:04:47,364
just x.
So the only piece

61
00:04:47,364 --> 00:04:50,580
of this substitution that applies is
the left most one here.

62
00:04:50,580 --> 00:04:56,643
One for X and the result is one.
Let's do a more complicated example, let's

63
00:04:56,643 --> 00:05:02,484
see whether new Rational of one two is less
than new Rational of two three.

64
00:05:02,484 --> 00:05:07,760
How would we go about that?
So here you see the definition of less.

65
00:05:07,760 --> 00:05:14,016
So we would have three substitutions again.

66
00:05:14,016 --> 00:05:18,438
There's the substitution of one and two
for x and y, as before.

67
00:05:18,438 --> 00:05:23,690
Then there's the substitution of the
argument here, a new rational of two,

68
00:05:23,690 --> 00:05:30,539
three for the That parameter of Less.
And finally, there's a substitution that

69
00:05:30,539 --> 00:05:37,230
replaces the "this" in less's body by the
receiver of the call, new Rational of (1, 2).

70
00:05:37,230 --> 00:05:42,690
And all these three substitutions are
applied to the body of less that you see

71
00:05:42,690 --> 00:05:46,325
here.
So here, it's written out in slightly

72
00:05:46,325 --> 00:05:49,956
nicer fonts.
But that's the body that you see here.

73
00:05:49,956 --> 00:05:54,741
Note that I have made explicit that this
is the argument for references

74
00:05:54,741 --> 00:06:01,127
because we need that for the substitution
model to work correctly.

75
00:06:01,127 --> 00:06:07,681
So what that means is that, if I apply the
substitutions, then the "this" gets

76
00:06:07,681 --> 00:06:10,156
replaced by new Rational (1, 2).
So that's the two occurrences you

77
00:06:10,156 --> 00:06:13,057
see here.
And the "that" gets replaced by new

78
00:06:13,057 --> 00:06:16,391
Rational (2, 3).
That's the two occurrences that you see

79
00:06:16,391 --> 00:06:24,905
here.
And if we then apply the further

80
00:06:24,905 --> 00:06:30,203
substitutions for numer, and an analogous
substitution for denom, then we arrive at

81
00:06:30,203 --> 00:06:37,685
this expression here, which reduces to
true, as usual.

82
00:06:37,851 --> 00:06:40,735
So one more thing we want to cover this

83
00:06:40,735 --> 00:06:45,333
session is operators.
You see, in principle the rational numbers

84
00:06:45,333 --> 00:06:49,966
defined by our class are as natural as
integers, and mathematical abstractions

85
00:06:49,966 --> 00:06:54,931
just as good as integers.
But for the user of these abstractions

86
00:06:54,931 --> 00:07:01,477
there's currently a noticeable difference.
You write if x and y are integers, you

87
00:07:01,477 --> 00:07:06,264
write x plus y.
But if R and S are rational numbers, you

88
00:07:06,264 --> 00:07:11,536
need to write r.add(s).
So that's not very natural, and in fact,

89
00:07:11,536 --> 00:07:17,705
in Scala we can eliminate this difference.
To do that, we proceed in two steps.

90
00:07:17,705 --> 00:07:23,586
At the first step, we introduce
in fix notation for methods.

91
00:07:23,586 --> 00:07:28,200
It turns out that any method with a
parameter can be used like an infix

92
00:07:28,200 --> 00:07:33,376
operator in Scala.
So instead of having to write r.add(s),

93
00:07:33,376 --> 00:07:37,081
you can write just as well, r add s.

94
00:07:37,281 --> 00:07:42,152
R dot less s becomes r less s, and for
maximum it's the same thing.

95
00:07:42,152 --> 00:07:45,157
So the two things mean exactly the same
things.

96
00:07:45,157 --> 00:07:50,471
The left sides expand to the right sides.
You can do that for any operator that you

97
00:07:50,471 --> 00:07:57,872
have in Scala.
The second step is about relaxing the form

98
00:07:57,872 --> 00:08:01,731
of identifiers.
Normally in programing languages,

99
00:08:01,731 --> 00:08:06,462
identifiers are alpha numeric, so they
start with a letter, then they are

100
00:08:06,462 --> 00:08:09,447
followed by a sequence of letters or
numbers.

101
00:08:09,447 --> 00:08:13,803
In Scala you have an alternative
form of identifiers where identifiers can be

102
00:08:13,803 --> 00:08:16,768
symbolic.
They start with an operator symbol, such

103
00:08:16,768 --> 00:08:21,349
as plus or minus, anything other than a
letter or a digit, and they're followed by

104
00:08:21,349 --> 00:08:25,874
other operator symbols.
In this treatment, the underscore

105
00:08:25,874 --> 00:08:31,679
character underscored that we use a
relaxed notion of identifiers in Scala.

106
00:08:31,679 --> 00:08:37,227
Normally in programming languages, an
identifier is alpha numeric.

107
00:08:37,227 --> 00:08:42,008
It starts with a letter and it's followed
by a sequence of letters and numbers.

108
00:08:42,008 --> 00:08:47,079
In Scala, operators are also treated
as identifiers, and to achieve that we

109
00:08:47,079 --> 00:08:51,702
have introduced a second form of
identifiers which we call symbolic.

110
00:08:51,702 --> 00:08:56,995
Such an identifier starts with an operator
symbols such as plus, or minus or question

111
00:08:56,995 --> 00:09:01,920
mark, and is be followed by other operator
symbols.

112
00:09:01,920 --> 00:09:03,474
In the definition, the underscore

113
00:09:03,474 --> 00:09:09,193
character, as usual, counts as a letter.
And there's a final twist, we can also mix

114
00:09:09,193 --> 00:09:12,619
alphanumeric and symbolic.
We can start with an alphanumeric

115
00:09:12,619 --> 00:09:18,072
identifier, followed by an underscore,
then followed by some operator symbols.

116
00:09:18,072 --> 00:09:21,697
So here I give you some identifiers in
Scala.

117
00:09:21,697 --> 00:09:30,849
x1, times, +?%&, that's not necessarily
an identifier I would recommend you use,

118
00:09:30,849 --> 00:09:38,176
vector underscore ++ or counter underscore =.
And all these names are legal

119
00:09:38,176 --> 00:09:41,218
identifiers in Scala.
So let's see how we could apply that to

120
00:09:41,218 --> 00:09:45,053
class rational.
Let's start with the first operator, less

121
00:09:45,053 --> 00:09:48,492
here.
So a better name for less would be just

122
00:09:48,492 --> 00:09:55,624
the less than or equal sign.
Then we would change max accordingly.

123
00:09:55,624 --> 00:10:04,142
To say if this less than that, and the
program here compiles again.

124
00:10:04,142 --> 00:10:06,956
And the usage of course, it would be the
same thing.

125
00:10:06,956 --> 00:10:12,053
I would write X less than Y.
For maximum, I think maximum is a nice

126
00:10:12,053 --> 00:10:17,533
operator as it stands, but I can write it
infix.

127
00:10:17,533 --> 00:10:23,440
Now that we've dealt with less and max.
What about add and sub?

128
00:10:23,440 --> 00:10:27,437
So for add, we would, of course, find
plus.

129
00:10:27,437 --> 00:10:37,541
For sub, we would, find minus.
And the definition of sub would be this

130
00:10:37,541 --> 00:10:48,287
plus that dot neg.

131
00:10:48,287 --> 00:10:57,926
And in the code here, I can now use the arithmetic operations

132
00:10:57,926 --> 00:11:08,031
as I'm used from mathematics.
Now the final operations to look at would

133
00:11:08,031 --> 00:11:11,365
be neg.
You've seen that we can replace all the

134
00:11:11,365 --> 00:11:15,547
arithmetic operations on rational by the
natural mathematical symbols.

135
00:11:15,547 --> 00:11:22,258
But there's still neg which sort of sticks
out because, instead of neg, we would want

136
00:11:22,258 --> 00:11:28,513
to write prefix minus.
So how can we achieve that?

137
00:11:28,513 --> 00:11:34,498
So if you look at the error message here,
it tells us, well, unary underscore minus is

138
00:11:34,498 --> 00:11:39,239
not a member of rational.
So what that means is that, because the

139
00:11:39,239 --> 00:11:43,497
prefix operator minus is really different
from the infix operator minus,

140
00:11:43,497 --> 00:11:49,267
there's a special convention in Scala.
We have to call it unary minus.

141
00:11:49,267 --> 00:11:54,494
And if we do that, then,

142
00:11:54,494 --> 00:11:59,541
we see that, now everything works out, and
we also get prefix operators.

143
00:11:59,541 --> 00:12:06,396
One thing to guard against is that if a method name

144
00:12:06,396 --> 00:12:11,273
ends in an operator symbol, then you need
at least a space between that and the

145
00:12:11,273 --> 00:12:15,399
final colon.
Because otherwise, a colon is actually a legal

146
00:12:15,399 --> 00:12:20,033
symbol.
So the colon would just be merged

147
00:12:20,033 --> 00:12:25,086
with the operator name, to form one long
operator minus colon.

148
00:12:25,086 --> 00:12:30,205
So that would be here, an error, that you
see.

149
00:12:30,205 --> 00:12:34,594
So, you've seen that we can now use the
usual mathematical expressions like, x

150
00:12:34,594 --> 00:12:39,692
times x plus y times y.
But, there's one issue still, namely about

151
00:12:39,692 --> 00:12:44,857
the precedence of the operators.
As you're used, the times here binds

152
00:12:44,857 --> 00:12:51,616
stronger than the plus, so implicit
parenthesis go like this. But you might

153
00:12:51,616 --> 00:12:56,206
ask, well how is that actually achieved if
all operators are user defined, how is the

154
00:12:56,206 --> 00:12:59,623
precedence between those operators
established?

155
00:12:59,623 --> 00:13:04,638
Well, there's actually one universal rule
in Scala, that the precedence of an

156
00:13:04,638 --> 00:13:07,871
operator is determined by its first
character.

157
00:13:07,871 --> 00:13:12,687
And here's a table of all the characters
and the precedence categories.

158
00:13:12,687 --> 00:13:17,592
You will note that the table is very
similar to precedence in a language such

159
00:13:17,592 --> 00:13:24,006
as Java or C, and that's no accident.
So, the first thing to do is to say, well

160
00:13:24,006 --> 00:13:28,697
the lowest precedence is every operator
that starts with a letter.

161
00:13:28,697 --> 00:13:31,645
So alphanumeric operators have lowest
precedence.

162
00:13:31,645 --> 00:13:35,441
Then we take essentially the precedence
groups of C and Java.

163
00:13:35,441 --> 00:13:40,195
So the next lowest is bar, followed by
caret, followed by ampersand, followed by

164
00:13:40,195 --> 00:13:46,569
less than, greater than, equals, bang.
The colon is inserted the colon is not in

165
00:13:46,569 --> 00:13:53,380
java so we inserted in here then plus
minus and finally times, slash and percent.

166
00:13:53,380 --> 00:13:58,859
And every character which not in this list,
every symbol character which is not in

167
00:13:58,859 --> 00:14:02,760
this list is assumed to have a higher
precedence than everything else.

168
00:14:02,760 --> 00:14:06,559
You might say why these rules and not
others and I don't really have a good

169
00:14:06,559 --> 00:14:09,176
answer for that.
The only answer is that it's important

170
00:14:09,176 --> 00:14:14,012
that everybody uses the same precedence
rules because otherwise it's very hard to

171
00:14:14,012 --> 00:14:17,715
read other people's code.
So that's why Scala has opted for a

172
00:14:17,715 --> 00:14:22,550
single rule that determines the precedence
of each operator.

173
00:14:22,550 --> 00:14:26,845
So as an exercise for this session, I
would like you to ask to provide a fully

174
00:14:26,845 --> 00:14:32,590
parenthesized version of this string of
this expression here.

175
00:14:32,590 --> 00:14:37,011
What I mean by that is that you should
put every binary operation into

176
00:14:37,011 --> 00:14:44,761
parenthesis in a way that the structure of
the expression doesn't change.

177
00:14:44,761 --> 00:14:47,375
So let's see how we would go about that.

178
00:14:47,375 --> 00:14:51,742
In this string here, what's the operator with the highest precedence?

179
00:14:51,742 --> 00:14:53,835
Well it turns out it's the ?^

180
00:14:53,835 --> 00:14:57,889
because question mark was not in our list
yet it's a symbolic character.

181
00:14:58,197 --> 00:15:00,712
So those are assumed to have the highest precedence.

182
00:15:00,820 --> 00:15:05,147
So we are safe making a pair of
parentheses around this one first.

183
00:15:05,147 --> 00:15:10,105
The next highest one then would be the plus that we see here.

184
00:15:10,105 --> 00:15:16,766
So that gives us here a pair of parentheses.
Followed by the equals sign here.

185
00:15:16,766 --> 00:15:21,064
So the arrow here would be in parentheses.

186
00:15:21,064 --> 00:15:29,584
Of the remaining three, the next highest
one would be the caret.

187
00:15:29,584 --> 00:15:34,804
Then the bar, and finally the lowest precedence

188
00:15:34,804 --> 00:15:38,666
would be the less.
So that's the fully parenthesized version of

189
00:15:38,666 --> 00:15:42,737
the string I'm after.
Now, this might be a fun exercise

190
00:15:42,737 --> 00:15:48,542
but you see that, if you are actually
asked to read a string like that, then that's

191
00:15:48,542 --> 00:15:49,367
maybe less funny.

192
00:15:49,367 --> 00:15:52,117
Of course it's perfectly fine to define a

193
00:15:52,117 --> 00:15:57,715
mathematical operator such as plus or bar.
For something where this operator makes

194
00:15:57,715 --> 00:16:00,681
sense.
And in some domains it's also perfectly

195
00:16:00,681 --> 00:16:05,751
fine to define new symbolic operators that
have a special fixed meaning in these

196
00:16:05,751 --> 00:16:09,370
domains.
But please don't go overboard inventing

197
00:16:09,370 --> 00:16:14,220
fancy operator names for all
the operations in your API.

198
00:16:14,220 --> 00:16:18,818
It's usually not appreciated by the users
because they will have a hard time

199
00:16:18,818 --> 00:16:24,171
understanding that and also will have a
hard time setting the parentheses as you

200
00:16:24,171 --> 00:16:25,455
see here.

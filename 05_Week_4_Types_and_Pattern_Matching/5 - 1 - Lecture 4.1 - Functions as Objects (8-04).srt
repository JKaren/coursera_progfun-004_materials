1
00:00:00,000 --> 00:00:05,334
Now that we've seen how we can encode
primitive types as classes, the only two

2
00:00:05,334 --> 00:00:11,694
fundamental types of values that are left
are instances of classes and functions.

3
00:00:11,694 --> 00:00:16,891
What we're going to look at in this
session is how function types relate to

4
00:00:16,891 --> 00:00:20,311
classes, and how function values relate to
objects.

5
00:00:20,311 --> 00:00:25,713
In the last session, we've seen that
Scala's numeric types and the Boolean type

6
00:00:25,713 --> 00:00:29,270
can conceptually be implemented like
normal classes.

7
00:00:29,270 --> 00:00:34,148
But what about functions?
Are functions special or are they also

8
00:00:34,148 --> 00:00:38,096
just objects?
In fact, function values are treated as

9
00:00:38,096 --> 00:00:43,100
objects in Scala, not just conceptually,
but in reality.

10
00:00:43,100 --> 00:00:48,687
What happens here is that the function
type a arrow b is really just an

11
00:00:48,687 --> 00:00:52,800
abbreviation for the class scala dot
function one ab.

12
00:00:52,800 --> 00:00:56,847
And that class is roughly defined, as you
can see here.

13
00:00:56,847 --> 00:01:02,318
In fact, function values are already
treated as objects in Scala not just

14
00:01:02,318 --> 00:01:07,040
conceptually, but really.
The function type A arrow B is just an

15
00:01:07,040 --> 00:01:12,137
abbreviation for the class
scala.function1, two type parameters, the

16
00:01:12,137 --> 00:01:15,809
A and the B.
And that class is roughly defined as

17
00:01:15,809 --> 00:01:19,332
follows.
So it's a trait in pack of Scala.

18
00:01:19,557 --> 00:01:25,938
It takes the two type parameters, A and B.
And it has a single method which is called

19
00:01:25,938 --> 00:01:29,632
Apply.
So apply the function to an argumentix of

20
00:01:29,632 --> 00:01:35,634
type A, yielding a result of type B.
So functions are really objects with apply

21
00:01:35,634 --> 00:01:38,872
methods.
What you've seen here was the definition

22
00:01:38,872 --> 00:01:43,926
of four functions of a single argument,
but there are also classes, function two,

23
00:01:43,926 --> 00:01:48,084
function three and so on, for functions
that take more parameters.

24
00:01:48,084 --> 00:01:53,073
Currently we have those function traits
until 22 parameters, but in the future

25
00:01:53,073 --> 00:01:56,720
there might be more, or we might be more
flexible in that.

26
00:01:58,570 --> 00:02:03,108
Okay, so we've looked at function types.
What about function values?

27
00:02:03,108 --> 00:02:08,609
Let's look at an anonymous function like
the squaring function here, which takes

28
00:02:08,609 --> 00:02:12,873
and X and returns X times X.
What would that expand to in this

29
00:02:12,873 --> 00:02:17,755
object-oriented view of functions?
Well, it would be a new class that we

30
00:02:17,755 --> 00:02:23,532
create here called this anonfun, I assume
that the name is not used otherwise in the

31
00:02:23,532 --> 00:02:26,489
program.
And that would be a subclass of my

32
00:02:26,489 --> 00:02:30,064
function one trait, Int, Int are the
argument types.

33
00:02:30,064 --> 00:02:35,148
And the apply method then, would be one
that takes an integer and returns the

34
00:02:35,148 --> 00:02:39,496
square of its argument.
So that was the class that implements this

35
00:02:39,496 --> 00:02:42,790
behavior.
Now all that's needed to do is create an

36
00:02:42,790 --> 00:02:47,006
instance of that class.
That would be the object that represents

37
00:02:47,006 --> 00:02:51,024
this function here.
So creating an instance is simply new and

38
00:02:51,024 --> 00:02:56,498
unfun.
In fact, that definition is again quite

39
00:02:56,498 --> 00:02:59,804
common and there's a shorter syntax for
it.

40
00:03:00,035 --> 00:03:05,264
It's called anonymous class syntax.
So what we can do is, we can take

41
00:03:05,264 --> 00:03:14,550
essentially this part here And leave out
the name, so we write just, new function

42
00:03:14,550 --> 00:03:17,552
one, and int, and the definition of that
class.

43
00:03:17,552 --> 00:03:22,891
So that create a new instance of a class
that I haven't bothered to give a name.

44
00:03:22,891 --> 00:03:28,163
That anonymous class syntax you actually
find in Java as well, so both Java and

45
00:03:28,163 --> 00:03:31,900
Scala have the same syntax in, in for, for
this construct.

46
00:03:32,620 --> 00:03:35,313
Okay.
So now we've seen how we represent

47
00:03:35,313 --> 00:03:38,813
functions.
But, what about then applications of these

48
00:03:38,813 --> 00:03:43,459
functions or function calls?
So, let's say we have a function that was,

49
00:03:43,459 --> 00:03:47,364
started life as this anonymous function.
So, it's an object.

50
00:03:47,364 --> 00:03:51,000
And now we apply it to two concrete
arguments, A and B.

51
00:03:51,340 --> 00:03:56,688
What would that expand to?
Well, what it would expand to is simply

52
00:03:56,688 --> 00:04:02,146
calling the apply method of the function
value with the same arguments.

53
00:04:02,146 --> 00:04:08,526
So a complete object oriented translation
of this code here, where you first create

54
00:04:08,526 --> 00:04:14,830
an anonymous function and then apply that
function to the value seven would be, we

55
00:04:14,830 --> 00:04:21,211
create a anonymous class instance, with an
apply method, name it F, and then call the

56
00:04:21,211 --> 00:04:28,550
apply method of F with the argument seven.
So now you see that functions are objects.

57
00:04:28,550 --> 00:04:32,575
Does the same hold for methods?
For instance, this apply method here.

58
00:04:32,575 --> 00:04:36,480
Would that, by itself, be an object?
Well, that can't very well work.

59
00:04:36,480 --> 00:04:40,565
Because if apply was an object.
Well, it would be an instance of this

60
00:04:40,565 --> 00:04:45,131
function class, which would be, have an
apply method, which would be an object,

61
00:04:45,131 --> 00:04:49,697
Which would be an instance of this
function class, which would have an apply

62
00:04:49,697 --> 00:04:51,320
method.
You see the problem.

63
00:04:51,320 --> 00:04:56,290
We would get an infinite expansion.
So what happens instead is that methods

64
00:04:56,290 --> 00:05:00,581
such as Def, F, Boolean.
So anything that's defined with a Def are

65
00:05:00,581 --> 00:05:05,334
not, themselves, function values.
But if the name of a method is used in a

66
00:05:05,334 --> 00:05:10,351
place where a function type is expected,
it's converted automatically to the

67
00:05:10,351 --> 00:05:14,114
function value.
And the conversion is just that we create

68
00:05:14,114 --> 00:05:19,131
an anonymous function like this one here.
Which, where we say, well, give me an

69
00:05:19,131 --> 00:05:22,300
argument, and I apply the method to the
argument.

70
00:05:22,300 --> 00:05:27,618
That anonymous function value we've seen
how that expands to this new anonymous

71
00:05:27,618 --> 00:05:32,139
class. New function one in boolean with
the apply method.

72
00:05:32,139 --> 00:05:36,260
So that's how.
Functions really are treated in Scala.

73
00:05:36,260 --> 00:05:41,594
A technical term which you don't need to
remember, but I just give it for

74
00:05:41,594 --> 00:05:45,978
completeness here.
So this transformation here that converts

75
00:05:45,978 --> 00:05:51,897
the name F to this anonymous function,
It's called, in lambda, calculus, eta

76
00:05:51,897 --> 00:05:55,990
expansion.
So if you hear sometimes the word eta

77
00:05:55,990 --> 00:06:01,204
expansion, then you know now what it is.
Let's do an exercise.

78
00:06:01,204 --> 00:06:06,717
In package week four, where we have
defined previously the list class with its

79
00:06:06,717 --> 00:06:10,393
subclasses,
I want you to define an object list with

80
00:06:10,393 --> 00:06:14,917
some functions in it.
And the idea would be that users will then

81
00:06:14,917 --> 00:06:19,370
be, create lists of length,
Zero, one, or two just with the syntax.

82
00:06:19,370 --> 00:06:23,894
So list of open parens, closed parens with
the empty list.

83
00:06:23,894 --> 00:06:27,853
List of one would be the list of the
single element one.

84
00:06:27,853 --> 00:06:32,289
And so on.
So let's see how we would solve this.

85
00:06:32,289 --> 00:06:38,085
I've put up the list class that we've
developed previously so the task was to

86
00:06:38,085 --> 00:06:44,179
develop an object together with that class
that would give us that syntax that we

87
00:06:44,179 --> 00:06:47,151
could just call list of twelve.
Lets say.

88
00:06:47,151 --> 00:06:52,056
So how would we do that.
So idea is if we look at that syntax list

89
00:06:52,056 --> 00:06:57,332
is used in function possession.
So what this would really expand to you

90
00:06:57,332 --> 00:07:03,421
know that would be list.apply12.
So that means that we're asked to define a

91
00:07:03,421 --> 00:07:08,168
method called Apply.
And in that case it would take two

92
00:07:08,168 --> 00:07:11,190
arguments.
A, let's call it X1.

93
00:07:11,190 --> 00:07:18,178
Of type T and X2 of type T, so the T can
be arbitrary, we have to parametrize apply

94
00:07:18,178 --> 00:07:23,472
with it.
Then would return a list, so result type

95
00:07:23,472 --> 00:07:29,238
is list of t.
And it would then return a list that

96
00:07:29,238 --> 00:07:37,310
consists of these elements.
So that would be new of cons of x1 and new

97
00:07:37,310 --> 00:07:46,806
of cons of x2 and new of middle.
And for the other two, for list of one and

98
00:07:46,806 --> 00:07:50,779
list of zero, the result would be
analogous.

99
00:07:50,779 --> 00:07:54,580
So, I leave out list of with single
elements.

100
00:07:54,580 --> 00:07:59,157
But, for the empty list, I simply have an
apply method.

101
00:07:59,157 --> 00:08:02,440
It takes no arguments.
I would give us.

1
00:00:00,000 --> 00:00:04,676
In this session we come back to the
problem of proving properties about

2
00:00:04,676 --> 00:00:07,728
programs.
Where before, we covered just lists, we

3
00:00:07,728 --> 00:00:11,235
will now look at more job data structures,
Maybe trees.

4
00:00:11,235 --> 00:00:16,366
Remember in the intro to this course, I
told you that functional programming is

5
00:00:16,366 --> 00:00:21,692
important because it's very close to the
mathematical theories of data structures.

6
00:00:21,692 --> 00:00:25,588
We put that to a test.
Now we will develop such a theory for

7
00:00:25,588 --> 00:00:30,200
integer sets and prove an implementation
correct with respect to the theory.

8
00:00:30,200 --> 00:00:35,666
As was the case in the previous proving
sessions, the material in this session is

9
00:00:35,666 --> 00:00:40,188
optional for the online class.
If you're a student of the Life EPFL

10
00:00:40,188 --> 00:00:45,520
class, you should follow the material,
because it might be relevant for the exam.

11
00:00:45,520 --> 00:00:50,850
But we can generalize the structural
induction principal for lists to arbitrate

12
00:00:50,850 --> 00:00:54,715
these structures.
The principal then becomes the following.

13
00:00:54,715 --> 00:01:00,720
We want to prove a property P of T for all
trees of a certain type What we need to do

14
00:01:00,720 --> 00:01:07,289
to do that, is we need to show that P of L
holds for all leaves types of the tree.

15
00:01:07,289 --> 00:01:14,101
And for each type of internal node T which
has let's say sub-trees as one, two SN, we

16
00:01:14,101 --> 00:01:20,265
need to show that under the assumption
that PS1 and PSN all the sub, all the

17
00:01:20,265 --> 00:01:24,320
sub-trees satisfy the predicate than P of
T holds.

18
00:01:24,320 --> 00:01:29,356
So let's use this proof technique to show
some interesting facts about IntSet.

19
00:01:29,692 --> 00:01:33,520
We call our definition of IntSets from
previous sessions.

20
00:01:33,520 --> 00:01:38,758
We had an abstract class IntSet with
operation include and contains, and then

21
00:01:38,758 --> 00:01:43,969
we had two different implementations.
Once was, one was an object empty and the

22
00:01:43,969 --> 00:01:47,533
other was the class nonempty, and there
was an invariant.

23
00:01:47,533 --> 00:01:51,671
We assume then that was that the elements
in a tree were ordered.

24
00:01:51,671 --> 00:01:56,954
That means that the left subtree of any
nonempty tree contained elements that were

25
00:01:56,954 --> 00:01:59,755
smaller, or smaller than the current
element.

26
00:01:59,755 --> 00:02:03,765
And the right subtree contained elements
that were larger.

27
00:02:03,765 --> 00:02:08,540
And our implementations of contains and
include made use of that invariant.

28
00:02:08,540 --> 00:02:13,070
So we would like to prove that
implementation of IntSet correct.

29
00:02:13,070 --> 00:02:17,526
But what does it even mean?
What do we mean by, by proving the

30
00:02:17,526 --> 00:02:23,517
correctness of an IntSet implementation?
Well, one way to define correctness would

31
00:02:23,517 --> 00:02:28,339
be to define some laws that our
implementation should just, should

32
00:02:28,339 --> 00:02:33,015
satisfy, and then prove that the
implementation indeed does that.

33
00:02:33,015 --> 00:02:37,252
So in the case of IntSet, what laws could
we come up with?

34
00:02:37,252 --> 00:02:43,900
The first law says the empty set does not
contain any, any element so empty contains

35
00:02:43,900 --> 00:02:48,242
x is always false.
The second law says that if we add an

36
00:02:48,242 --> 00:02:54,523
element x to a set, an arbitrary set and
then ask whether the set contains x, then

37
00:02:54,523 --> 00:03:01,564
we are certain that we will get back true.
And the third law says that if we add an

38
00:03:01,564 --> 00:03:07,510
element x to a set and then ask whether
the set contains some other element y.

39
00:03:07,510 --> 00:03:11,616
Then the answer is the same thing as
simply S contains Y.

40
00:03:11,616 --> 00:03:15,579
So, it didn't matter the fact whether we
added X or not.

41
00:03:15,579 --> 00:03:21,198
The answer will be invariant under that.
In fact, one can show that these three

42
00:03:21,198 --> 00:03:25,377
laws completely characterize what it is,
to be an n set.

43
00:03:25,377 --> 00:03:30,708
So, the, we have now an algebraic
specification of IntSet which is complete.

44
00:03:30,708 --> 00:03:33,950
But it still remains how to prove these
laws.

45
00:03:33,950 --> 00:03:38,521
So, let's start with the first one.
Empty contains x equal false.

46
00:03:38,521 --> 00:03:44,155
Well that one is actually easy because
that's a direct consequence of the

47
00:03:44,155 --> 00:03:49,659
definition of contains and empty.
Have a quick look at it, so here you see

48
00:03:49,659 --> 00:03:53,290
empty contains any element would give us
false.

49
00:03:53,290 --> 00:03:59,344
The second proposition says that if we
include X and S and then ask, whether the

50
00:03:59,344 --> 00:04:04,450
set contains X, we would get true.
And that we can prove by a structure

51
00:04:04,450 --> 00:04:09,192
induction on the set S.
The base case would be the set S is empty,

52
00:04:09,192 --> 00:04:13,715
so we are left with the expression, empty
include X contains X.

53
00:04:13,715 --> 00:04:18,821
Now, empty include X, we know what that
is, by the rule of empty.include.

54
00:04:18,821 --> 00:04:24,875
That would give us a nonempty set X with
two empty subsets, and we ask whether that

55
00:04:24,875 --> 00:04:28,759
one contains X.
And, the answer here is true because of

56
00:04:28,759 --> 00:04:34,338
the clause of, contains in a nonempty set
where we know that if we ask for the

57
00:04:34,338 --> 00:04:38,272
element at the top of the tree then the
answer is True.

58
00:04:38,272 --> 00:04:42,850
We can compare to the implementation of
nonempty to verify that.

59
00:04:42,850 --> 00:04:46,856
So that was the base case.
What about the induction step?

60
00:04:46,856 --> 00:04:51,720
So the induction step would be that we
have a tree, call it nonempty.

61
00:04:52,300 --> 00:04:57,955
With free element zet.
L and R and we have to proof the

62
00:04:57,955 --> 00:05:04,744
proposition that include x and contain x
is true for each of these trees.

63
00:05:04,744 --> 00:05:10,089
We actually have two cases here.
We could have the case that the Z is the

64
00:05:10,089 --> 00:05:15,947
same as the X, or that the Z, the element
of the nonempty, is different from the X.

65
00:05:15,947 --> 00:05:21,804
Let's take these two cases turn by turn.
From the first case, I assume that the Z

66
00:05:21,804 --> 00:05:27,735
equals six, so I'm left with tree nonempty
XLR, and have to show that include X

67
00:05:27,735 --> 00:05:31,492
contains X equals true.
So what can we do in this case?

68
00:05:31,492 --> 00:05:35,236
Well, we can look at what's the definition
of include.

69
00:05:35,236 --> 00:05:40,117
If we look that up then we find that
including an element to a tree that

70
00:05:40,117 --> 00:05:43,995
already has that element at the root is
the original tree.

71
00:05:43,995 --> 00:05:47,800
So this expression here.
Would simplify to that one here.

72
00:05:47,800 --> 00:05:54,200
And then looking up the contain operation,
we, we find that asking contain.

73
00:05:54,200 --> 00:05:59,094
On a tree that contains that element at
the root would give you back true.

74
00:05:59,094 --> 00:06:01,938
So the whole expression simplifies to
true.

75
00:06:01,938 --> 00:06:07,229
So that handles the case where we, we're
left with a non-empty tree, and the root

76
00:06:07,229 --> 00:06:12,454
element X of the tree was the same element
as the one we included, and contains

77
00:06:12,454 --> 00:06:15,365
check.
What if the root element is different?

78
00:06:15,365 --> 00:06:20,366
There again we have two choices.
Either the root element is smaller than

79
00:06:20,366 --> 00:06:24,865
our element x or it's larger.
So let's look at the case where it is

80
00:06:24,865 --> 00:06:28,223
smaller.
So we would, we have a, a tree a non empty

81
00:06:28,223 --> 00:06:33,864
y, l, r include x, we ask whether it
contains x and we would like it to return

82
00:06:33,864 --> 00:06:35,426
true.
So, the.

83
00:06:35,426 --> 00:06:43,097
By the definition of nonempty include, we,
we can rewrite this term to this one here.

84
00:06:43,097 --> 00:06:47,071
Why?
Well, because we know that X is greater

85
00:06:47,071 --> 00:06:54,556
than the root element Y, so we would have
a recursive include at the, on the right

86
00:06:54,556 --> 00:06:59,015
hand side of the tree.
Okay, let's look at contents now.

87
00:06:59,015 --> 00:07:05,155
Again by the same reasoning, we would have
that contents test of a tree like that,

88
00:07:05,155 --> 00:07:09,627
would translate into a contents test of
its right sub-tree.

89
00:07:09,627 --> 00:07:12,887
So that would be root include X contains
X.

90
00:07:12,887 --> 00:07:18,723
And now we can apply the induction
hypothesis, which says for all sub-trees I

91
00:07:18,723 --> 00:07:23,120
assume that the property is proven, so I
am left with true.

92
00:07:24,520 --> 00:07:30,985
There's a third induction step to do where
now the root element of the tree y is

93
00:07:30,985 --> 00:07:37,302
greater than x, but this one is completely
analogous to the previous one so I'm going

94
00:07:37,302 --> 00:07:41,010
to omit it.
Now, let's prove the third proposition.

95
00:07:41,010 --> 00:07:46,614
That proposition reads that.
Xs include Y contains X is the same as XS

96
00:07:46,614 --> 00:07:53,397
contains X provided X and Y are different.
So, if X and Y are different, it makes no

97
00:07:53,397 --> 00:07:59,850
difference whether I add Y to the set and
ask whether and, it contains a given

98
00:07:59,850 --> 00:08:03,490
element, X, or whether I ask the set
directly.

99
00:08:03,490 --> 00:08:07,329
And to proof again would be by structure
induction.

100
00:08:07,329 --> 00:08:13,653
So assume first that the element that we
add is smaller than the element we test

101
00:08:13,653 --> 00:08:17,116
for.
The dual case where the element we add is

102
00:08:17,116 --> 00:08:22,010
larger is completely analogous so we don't
need to do both cases.

103
00:08:22,010 --> 00:08:27,049
The base case, then, would be that the set
is empty, so we include an element y into

104
00:08:27,049 --> 00:08:30,184
an empty set, and then we ask whether it
contains x.

105
00:08:30,184 --> 00:08:35,100
And to show is that that's actually the
same as asking the empty set whether it

106
00:08:35,100 --> 00:08:40,049
contains x directly.
So, empty include Y, gives us nonempty Y,

107
00:08:40,049 --> 00:08:45,007
empty, empty.
Asking whether that contains X, gives us

108
00:08:45,007 --> 00:08:50,443
empty contains X.
So, more precisely we go in the right

109
00:08:50,443 --> 00:08:57,500
subtree, because that's where the X is
bigger than Y, so that's the empty here.

110
00:08:58,260 --> 00:09:02,440
And that concludes the proposition.
That's what we needed to show.

111
00:09:02,440 --> 00:09:07,559
Now we have to do the inductive step.
So the inductive step is a tree, non

112
00:09:07,559 --> 00:09:10,902
empty.
With some root node Z, and a subtree L,

113
00:09:10,902 --> 00:09:14,978
and a subtree R.
And unfortunately, the five different

114
00:09:14,978 --> 00:09:19,592
cases to consider.
So the first case is that the root of the

115
00:09:19,592 --> 00:09:24,976
tree is, is, is the same as the node X.
Second one is, it's the same as Y.

116
00:09:24,976 --> 00:09:28,667
The third one is, it's smaller than both Y
and X.

117
00:09:28,667 --> 00:09:34,589
The fourth one is, it's between Y and X.
And the fifth one is, it's larger than

118
00:09:34,589 --> 00:09:38,665
both Y and X.
So let's look at some of these cases in

119
00:09:38,665 --> 00:09:41,276
turn.
The first two cases are easy.

120
00:09:41,276 --> 00:09:45,038
Lets first assume that the root of our
tree is x.

121
00:09:45,038 --> 00:09:50,182
So we have this expression here.
Non empty XLR include y contains x.

122
00:09:50,182 --> 00:09:56,324
So if we include y in a tree like that,
then what happens is that we actually go

123
00:09:56,324 --> 00:10:02,620
to the left sub tree and include y here.
Because by assumption y is smaller than x.

124
00:10:02,620 --> 00:10:07,989
So we ask whether that tree contains x,
and here the answer is obviously yes

125
00:10:07,989 --> 00:10:11,381
because the tree contains already x at the
root.

126
00:10:11,381 --> 00:10:15,620
So by the definition of non-empty contains
we get back true.

127
00:10:15,620 --> 00:10:19,647
What we wanted.
The second case would be that the root of

128
00:10:19,647 --> 00:10:25,370
the tree is the same as y, and if we look
at the right-hand side non-empty xlr

129
00:10:25,370 --> 00:10:28,903
contains x.
Then by the same reasoning that one is

130
00:10:28,903 --> 00:10:31,800
also true.
So the equation is established.

131
00:10:31,800 --> 00:10:36,787
The second easy case is where the root of
the tree is the same as Y.

132
00:10:36,787 --> 00:10:42,759
So now we include Y in a tree that already
has root Y and that of course is the same

133
00:10:42,759 --> 00:10:46,903
as the original tree.
That doesn't change anything and that

134
00:10:46,903 --> 00:10:51,304
again is what we wanted.
So now we come to the more difficult

135
00:10:51,304 --> 00:10:54,678
cases.
The first case is that we are left with

136
00:10:54,678 --> 00:10:58,933
the three non-empty ZLR, where set is
smaller than Y and X.

137
00:10:58,933 --> 00:11:05,168
And in that case we'd need to show again
that, that expression here is the same as

138
00:11:05,168 --> 00:11:09,056
just non-empty ZLR contains X.
So what can we do here?

139
00:11:09,056 --> 00:11:14,998
Well, again we apply the law of non-empty
include to conclude that yes, we have to

140
00:11:14,998 --> 00:11:20,280
include the element Y to the right
sub-tree, because Y is greater than Z.

141
00:11:22,300 --> 00:11:28,786
Then we, apply the definition of contains
to conclude in turn that, yes, we have to

142
00:11:28,786 --> 00:11:33,650
look at the right sub tree.
Because X is also greater than that.

143
00:11:33,650 --> 00:11:39,596
And then we can apply the induction
hypothesis to say, R include Y contains X

144
00:11:39,596 --> 00:11:44,538
is the same as R contains X.
Because we assume the theorem to be

145
00:11:44,538 --> 00:11:49,752
already proven for R.
And that, in fact, is the same as

146
00:11:49,752 --> 00:11:55,720
non-empty ZLR contains x, because if we
simplify that expression, we see that

147
00:11:55,720 --> 00:12:02,237
because x is greater than z, we look again
at the right sub-tree r, so again we have

148
00:12:02,237 --> 00:12:09,992
established the equality.
The next case is where z is now between y

149
00:12:09,992 --> 00:12:17,201
and x so we have the same situation as
before but the value of z now is between y

150
00:12:17,201 --> 00:12:21,245
and x.
So what we do in this case here is that

151
00:12:21,508 --> 00:12:29,183
including y into the tree here, we go to
the left of tree because Y is smaller than

152
00:12:29,183 --> 00:12:32,170
that.
Asking the contents.

153
00:12:32,423 --> 00:12:39,271
We go to the right of tree because x, x is
larger than set so we look actually we

154
00:12:39,271 --> 00:12:44,568
include and we test in different subtrees.
So we're left with r contains x.

155
00:12:44,568 --> 00:12:49,553
And that actually is already the same as
non empty set ZLR contains x by the

156
00:12:49,553 --> 00:12:53,309
definition of non empty contains work
backwards.

157
00:12:53,309 --> 00:12:57,953
Because again, for this tree here, we
look, again in the right subtree.

158
00:12:57,953 --> 00:13:02,938
So we've see that, in this case here,
we've established the equa-, equality

159
00:13:02,938 --> 00:13:06,079
without resorting to the induction
hypotheses.

160
00:13:06,079 --> 00:13:10,450
Because the inclusion and the test fell
into different subtrees.

161
00:13:10,450 --> 00:13:14,484
So the third case is where that is larger
than both y and x.

162
00:13:14,484 --> 00:13:19,997
And that's actually a complete dual of the
third case where that was smaller than

163
00:13:19,997 --> 00:13:23,695
both y and x.
So I have written down the proof here, but

164
00:13:23,695 --> 00:13:28,508
I will not go into the details one by one.
These are all the cases, so the

165
00:13:28,508 --> 00:13:33,767
proposition is established, so this proof
was quite involved, but on the other hand

166
00:13:33,767 --> 00:13:36,909
we were also showing something quite
significant.

167
00:13:36,909 --> 00:13:41,976
Namely the correctness of a non trivial
implementation of sets of binary trees.

168
00:13:41,976 --> 00:13:47,299
I would argue that the complexity of the
purely functional equational proofs often

169
00:13:47,299 --> 00:13:52,110
compare favorably, with what you would
have to do in an imperative language.

170
00:13:52,110 --> 00:13:57,547
If you haven't had enough of proving yet.
Here's an exercise for you which is, in

171
00:13:57,547 --> 00:14:01,421
fact, quite hard.
I come back to the question of adding

172
00:14:01,421 --> 00:14:06,790
union to IntSet So here's a way to do it,
which is actually a bit more efficient

173
00:14:06,790 --> 00:14:10,936
than the first solution that I've shown
you in the worksheet.

174
00:14:10,936 --> 00:14:16,645
So we would have, the union operation of
the empty set is, of course, the other set

175
00:14:16,645 --> 00:14:21,131
that we add to union.
And then union of a nonempty set would be

176
00:14:21,131 --> 00:14:23,510
defined like this.
We take the left.

177
00:14:23,510 --> 00:14:30,386
Sub-tree, we union it with the, the right
sub-tree, unioned with the other set, and

178
00:14:30,386 --> 00:14:35,200
finally include x in, into the resulting
tree at the end.

179
00:14:35,480 --> 00:14:40,826
So what I would like you to do is, to
prove the correctness of union, which is

180
00:14:40,826 --> 00:14:46,102
translated into the following law.
What you would like to have is that if we

181
00:14:46,102 --> 00:14:51,379
take the union of two sets, and we then
ask whether it contains an arbitrary

182
00:14:51,379 --> 00:14:57,120
element x, that this is equivalent to
asking whether either x has contain x or y

183
00:14:57,120 --> 00:15:03,284
is contain x, so both sides should be true
and false for the same sets and for the

184
00:15:03,284 --> 00:15:07,546
same elements.
The task then is to show this proposition

185
00:15:07,546 --> 00:15:10,210
by using structure induction on XS.
